name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  APP_DB_USERNAME: postgres
  APP_DB_PASSWORD: postgres
  APP_DB_NAME: postgres

jobs:

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

  # Start postgresql docker container
    - name: Start postgresql Container
      run: docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=${APP_DB_PASSWORD} -e POSTGRES_USER=${APP_DB_USERNAME} -e POSTGRES_DB=${APP_DB_NAME} -d postgres

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      
    - name: Docker Image Build
      run: docker image build -f Dockerfile -t chaosbaum/my-first-image:${{ github.sha }} ./

    - name: Docker Tag
      run: docker tag chaosbaum/my-first-image:${{ github.sha }} chaosbaum/my-first-image:latest
    
    - name: Docker Image Push
      run: docker image push chaosbaum/my-first-image:latest

  trivy:
    name: Trivy Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Docker Image Build
        run: docker image build -f Dockerfile -t my-first-image:latest ./

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan Docker image with Trivy
        run: |
          trivy image --severity CRITICAL,HIGH my-first-image:latest
        continue-on-error: true

      - name: Scan filesystem with Trivy
        run: |
          trivy fs --severity CRITICAL,HIGH .
        continue-on-error: true

      - name: Scan Dockerfile with Trivy
        run: |
          trivy config --severity CRITICAL,HIGH .
        continue-on-error: true

      - name: Fail on vulnerabilities
        if: always()
        run: |
          docker_scan=$(trivy image --severity CRITICAL,HIGH --format json my-first-image:latest)
          fs_scan=$(trivy fs --severity CRITICAL,HIGH --format json .)
          config_scan=$(trivy config --severity CRITICAL,HIGH --format json .)
          if [ "$(echo "$docker_scan" | jq '.Results[].Vulnerabilities | length')" -gt 0 ] || \
             [ "$(echo "$fs_scan" | jq '.Results[].Vulnerabilities | length')" -gt 0 ] || \
             [ "$(echo "$config_scan" | jq '.Results[].Vulnerabilities | length')" -gt 0 ]; then
            echo "Vulnerabilities found"
            exit 1
          fi
      
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
